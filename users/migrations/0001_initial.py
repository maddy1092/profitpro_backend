# Generated by Django 4.2.4 on 2023-08-02 14:00

from django.db import migrations, models
import django.utils.timezone
import users.models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "user_id",
                    models.PositiveIntegerField(primary_key=True, serialize=False),
                ),
                ("user_email", models.EmailField(max_length=254, unique=True)),
                ("user_display_name", models.CharField(blank=True, max_length=100)),
                ("first_name", models.CharField(blank=True, max_length=100)),
                ("last_name", models.CharField(blank=True, max_length=100)),
                ("role", models.CharField(blank=True, max_length=50)),
                ("city", models.CharField(blank=True, max_length=100)),
                ("address1", models.CharField(blank=True, max_length=255)),
                ("address2", models.CharField(blank=True, max_length=255)),
                ("about", models.TextField(blank=True)),
                ("dealer_name", models.CharField(blank=True, max_length=255)),
                ("email", models.EmailField(max_length=254, unique=True)),
                ("is_update", models.BooleanField(default=True)),
                ("lot_address", models.CharField(blank=True, max_length=255)),
                ("notes", models.TextField(blank=True)),
                ("phone", models.CharField(blank=True, max_length=20)),
                ("state", models.CharField(blank=True, max_length=100)),
                ("token", models.CharField(blank=True, max_length=255)),
                ("userImage", models.CharField(blank=True, max_length=255)),
                ("user_avatar", models.CharField(blank=True, max_length=255)),
                ("user_nicename", models.CharField(blank=True, max_length=100)),
                ("zipcode", models.CharField(blank=True, max_length=20)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        related_name="custom_user_set",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        related_name="custom_user_set_permissions",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", users.models.UserManager()),
            ],
        ),
    ]
